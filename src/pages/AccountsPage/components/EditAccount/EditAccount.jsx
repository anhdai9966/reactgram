import { useState } from "react";
import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { useDispatch, useSelector } from "react-redux";
import { showToast } from "~/app/appSlice";
import { setCurrentUser } from "~/app/userSlice";
import {
  IconProfile,
  IconSpinner12Spins,
  IconSpinner8SpinsWhite,
} from "~/components/UI/Icons";
import { useBoolean, useDidMountEffect, useDocumentTitle, useOnClickOutside } from "~/hooks";
import ModalLayout from "~/layouts/ModalLayout";
import { users } from "~/services";
import { isEmpty, toSlug } from "~/utils";
import InputItem from "../InputItem";
import GenderModal from "./components/GenderModal";
import TextareaItem from "./components/TextareaItem";

function EditAccount() {
  useDocumentTitle("Ch·ªânh s·ª≠a trang c√° nh√¢n ‚Ä¢ Reactgram photos");
  const { currentUser } = useSelector((state) => state.user);

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm();

  const [isLoadingEditUser, setIsLoadingEditUser] = useState(false);
  const {
    state: isShowModalGender,
    setFalse: closeModalGender,
    setTrue: showModalGender,
  } = useBoolean();

  useEffect(() => {
    setValue("email", currentUser.email);
    setValue("full_name", currentUser.full_name);
    setValue("username", currentUser.username);
    setValue("bio_url", currentUser.bio_url || "");
    setValue("bio", currentUser.bio || "");
    setValue("gender", currentUser.gender || "Kh√¥ng mu·ªën ti·∫øt l·ªô");
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentUser]);

  const [isActionBtnSend] = useState(true);
  const dispatch = useDispatch()

  const onSubmit = async (data) => {
    const combineData = {data, full_name_code: toSlug(data.full_name)}
    setIsLoadingEditUser(true);
    await users.updateProfile(currentUser.uid, combineData);
    dispatch(setCurrentUser(data))
    dispatch(showToast('C·∫≠p nh·∫≠t th√†nh c√¥ng üëèüëèüëè!'))
    setIsLoadingEditUser(false);
  };

  const modalRef = useOnClickOutside(() => {
    closeModalGender();
  });

  const handleFocusGender = () => {
    showModalGender();
  };

  const handleChangeGender = (data) => {
    setValue("gender", data.gender);
  };

  if (isEmpty(currentUser)) {
    return (
      <div className="w-full h-24 flex justify-center items-center">
        <IconSpinner12Spins className="w-6 h-6 animate-spinner12Spins" />
      </div>
    );
  }

  return (
    <article className="py-8 space-y-4">
      <div className="flex gap-4 lg:gap-6 px-2 items-center">
        <div className="px-2 h-8 flex items-center lg:justify-end lg:w-36 shrink-0">
          <div className="w-9 h-9 border rounded-full overflow-hidden">
            {!!currentUser.profile_pic_url && (
              <img
                src={currentUser.profile_pic_url}
                alt={currentUser.username}
              />
            )}
            {!currentUser.profile_pic_url && (
              <IconProfile className="text-[#8c8c8c]/60" />
            )}
          </div>
        </div>
        <div className="w-full max-w-sm space-y-2">
          <h2 className="text-lg">{currentUser.username}</h2>
          <label className="text-[#007AFF] cursor-pointer">
            <input type="file" name="avatarFile" className="hidden" />
            <span>Thay ƒë·ªïi ·∫£nh ƒë·∫°n di·ªán</span>
          </label>
        </div>
      </div>

      <form
        onSubmit={handleSubmit(onSubmit)}
        className="font-light space-y-4 px-2"
      >
        <div className="">
          <InputItem
            register={register("full_name")}
            type="text"
            placeholder="T√™n"
            title="T√™n"
            text={
              <p className="text-xs text-[#8c8c8c]">
                H√£y l·∫•y t√™n m√† b·∫°n th∆∞·ªùng d√πng ƒë·ªÉ t√†i kho·∫£n c·ªßa b·∫°n d·ªÖ t√¨m th·∫•y
                h∆°n. ƒê√≥ c√≥ th·ªÉ l√† t√™n ƒë·∫ßy ƒë·ªß, bi·ªát danh ho·∫∑c t√™n doanh nghi·ªáp
              </p>
            }
          />
        </div>

        <div className="">
          <InputItem
            register={register("username")}
            type="text"
            placeholder="T√™n ng∆∞·ªùi d√πng"
            title="T√™n ng∆∞·ªùi d√πng"
          />
        </div>

        <div className="">
          <InputItem
            register={register("bio_url")}
            type="text"
            placeholder="Trang web"
            title="Trang web"
          />
        </div>

        <div className="">
          <TextareaItem
            register={register("bio")}
            type="text"
            placeholder="Ti·ªÉu s·ª≠"
            title="Ti·ªÉu s·ª≠"
            rows={3}
            maxLength={150}
            text={
              <p className="text-xs text-[#8c8c8c]">
                <span>{watch("bio")?.length || 0}</span>
                <span> / 150</span>
              </p>
            }
          />
        </div>

        <div className="">
          <InputItem
            text={
              <div className="text-[#8c8c8c]">
                <h2 className="text-sm font-semibold">Th√¥ng tin c√° nh√¢n</h2>
                <p className="text-xs">
                  Cung c·∫•p th√¥ng tin c√° nh√¢n c·ªßa b·∫°n, b·∫•t k·ªÉ b·∫°n d√πng t√†i kho·∫£n
                  cho doanh nghi·ªáp, th√∫ c∆∞ng hay g√¨ kh√°c. Th√¥ng tin n√†y s·∫Ω kh√¥ng
                  hi·ªÉn th·ªã tr√™n trang c√° nh√¢n c√¥ng khai c·ªßa b·∫°n.
                </p>
              </div>
            }
          />
        </div>

        <div className="">
          <InputItem
            register={register("email")}
            type="email"
            placeholder="Email"
            disabled={true}
            title="Email"
          />
        </div>
        <div className="">
          <InputItem
            type="text"
            placeholder="Gi·ªõi t√≠nh"
            register={register("gender")}
            title="Gi·ªõi t√≠nh"
            onFocus={handleFocusGender}
          />
        </div>

        <div className="">
          <InputItem
            text={
              <div className="w-full flex justify-between">
                {isLoadingEditUser && (
                  <div className="font-semibold w-16 h-8 text-white bg-[#007AFF] rounded-md px-3 py-1 flex justify-center items-center">
                    <IconSpinner8SpinsWhite className="w-4 h-4 animate-spinner8Spins" />
                  </div>
                )}
                {!isLoadingEditUser && (
                  <button
                    disabled={!isActionBtnSend}
                    className={`font-semibold w-16 h-8 text-white bg-[#007AFF] rounded-md px-3 py-1 ${
                      !isActionBtnSend && "opacity-50 disabled:cursor-not-allowed"
                    }`}
                  >
                    <span>G·ª≠i</span>
                  </button>
                )}
                <div className="text-[#007AFF] font-semibold text-sm hover:bg-black/[5%] px-2 py-1 rounded-md flex items-center cursor-pointer">
                  V√¥ hi·ªáu h√≥a t√†i kho·∫£n c·ªßa t√¥i
                </div>
              </div>
            }
          />
        </div>
      </form>
      <ModalLayout isShow={isShowModalGender} ref={modalRef}>
        <GenderModal
          setFalse={closeModalGender}
          defaultValue={currentUser.gender.type}
          handle={handleChangeGender}
        />
      </ModalLayout>
    </article>
  );
}

export default EditAccount;
